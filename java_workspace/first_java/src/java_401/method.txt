Overloading(오버로딩)
	: 객체 지향 프로그래밍은 다형성이라는 특징을 갖고 있습니다.
	다형성은 여러개의 클래스가 같은 메시지에 대해 각자의 방법으로 작동할수 있도록 하는 것입니다.
	자바는 다형성을 위해 Overloading(오버로딩 : 다중 정의)과 overriding(오버라이딩: 재 정의)을 제공합니다.
	
	
	재정의는 상속 관계에서 사용하는 개념입니다. 
	클래스를 상속 받은 자식 클래스가 부모클래스와 동일한 메소드를 다시 정의 하는 것을 재정의라고 합니다.
	다중 정의는 클래스 내부에서 같은 이름의 메소드가 2개 이상 정의 되는 것을 말합니다. 
	결국 다중 정의는 메소드 이름은 같고 매개 변수의 갯수 또는 매개 변수의 자료형이 다른 메소드를 여러개 정의 하는 것 입니다.
	이처럼 다중 정의 된 메소드를 호출할때 어떤 메소드를 실행 할지 구분하는 방법은 주어진 매개변수에 따라  처리 됩니다.
	
	
	메소드를 서로 구분하기 위해 사용하는 정보를 Sinature(시그니처)라 합니다. 
	자바에서 사용하는 시그니처는 메소드 이름, 매개변수의 갯수, 매개변수의 자료형 입니다.
	이 세가지 정보중 하나라도 다르면 다른 메소드로 간주 합니다.
	결국 오버로딩은 시그니처중 메소드의 이름만 같은 메소드를 의미합니다.
	
	
	.Method(메소드)
		: 메소드는 객체가 작업할 내용을 정의해 놓은 부분입니다.
		기존 C, C++ 에서는 Function(함수)라고 부릅니다.
		
		메소드는 Head(머리), 부분과 Body(몸통) 부분으로 구성 됩니다.
		머리 부분은 메소드의 반환값, 자료형, 메소드 이름, 매개변수 등으로 구성되어 있고
		몸체는 중괄호({ })를 이용해 블럭으로 만듭니다.
		
		
		형태
		
			접근 제어자					
	[public / protected / private][abstract / final / static / synchronized] 반환 자료형 메소드이름(매개변수,..)
		{
	
					변수 선언;
					문장1;
					문장2;

		}
	
	. abstract : 추상 메소드 선언에 사용  => 상속과 관련됨
	. final : 종단 메소드 선언에 사용 => 상속과 관련
	. static : 클래스 메소드 선언에 사용
	. synchronized : 쓰레드의 임계 영역 지정에 사용
	
	
	
	. public static void main(String[] args){
				
				}
				
	. main() 메소드는 프로그램의 시작점입니다.
	
		public : 누구나 접근할수 있음
		static : 클래스 메소드
		void   : return 문으로 반환되는 값이 없음
		main() : 프로그램 시작점
		String[] args : 문자열 배열 매개변수 args를 가지고 있음
		
		
		: 메소드는 특정한 작업을 수행하는 부분이고 메소드를 실행하기 위해서는 메소드를 호출(Call)합니다.
		메소드를 호출할때 메소드에 특정한 값을 전달하는 경우가 있습니다.
		이럴때 매개 변수를 사용합니다. 매개 변수는 메소드에게 값을 전달하는 통로 입니다.
	
	
	
	
	
	
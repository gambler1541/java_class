Thread(스레드)
	: 컴퓨터는 실행할 프로그램을 메모리에 load 시켜놓고 CPU가 명령어를 하나씩 해석하면서  처리 합니다.
	이때 하드 디스크와 같은 보조 기억 장치에 저장되어 있는 프로그램을 메모리에 저장하게 됩니다.
	하드 디스크에 들어있는 프로그램을 파일 이라고 부르는 반면에 메모리에 적재된 프로그램을 Process(프로세스)라고 부릅니다.
	
	Thread는 프로세스 안에서 순차적으로 작동하는 명령어의 집합입니다.
	순차적으로 실행되는 명령어들은 하나의 실로 꿸수 있기 때문에 Thread(실)이라고 부릅니다.
	
	어떤 프로그램(프로세스)에서는 여러개의 명령어가 독립적으로 실행되는 경우가 있는데 이런 경우를 다중 스레드라 합니다.
	즉 Multi-Thread(다중 스레드)는 한개의 프로세스에서 독립적으로 처리되는 작업이 여러개 있는 경우 입니다.
	
	자바에서 스레드는 java.lang.Thread 클래스에서 상속 받아 사용합니다.
	스레드를 사용하는 경우의 대부분은 동사에 두가지 이상의 작업을 처리할때 입니다.
	
	. 프로세스는 특정한 작업을 처리하기 위해 메모리에 적재되어 잇는 프로그램이고 스레드는 명령의 제어 흐름입니다.
	즉 명령어가 실행되는 순서의 흐름입니다.
	스레드는 프로세스 내부에서 독립적인 작업을 처리하는 명령어의 집합입니다.
	
	
	. 스레드 사용방법
		: 자바는 스레드를 사용하기 위해 두가지 방법을 제공합니다.
		
		첫번째는 java.lang.Thread 클래스를 상속받아 스레드를 생성하여 사용하는 방법이고
		
			. class 클래스 이름 extends Thread{
				...;
			}
		
		
		
		두번째는 java.lang.Runnable 인터페이스를 implements 해서 스레드를 생성하는 방법이다.
		
			. class 클래스 이름 extends 슈퍼클래스 implements Runnable {
				...;
			}
			
			
		. Thread class 사용
		
		1. Thread 클래스를 상속 받은 클래스를 선언한다.
		
		2. Thread 클래스의 추상메소드인 run() 메소드를 재정의 한다
		
			class ThreadTest extends Thread
				{
					public void run()	=> run() 메소드 재정의
						{
							...;
						}
				}
				
				
		3. main() 메소드에서 Thread 클래스를 상속 받은 클래스 객체를 생성한다.
		
		4. 생성된 객체를 사용해 start() 메소드를 호출한다.
			: 메소드는 run()을 만들었지만 호출은 start()
			
			public static void main(String[] args) {
				
				threadTest obj = new ThreadTest();	=> 객체 생성
				obj.start();					
				
			}
			
		
		Tread 에서 run() 대신 start()를 호출하는 이유
		
		. 스레드를 실행할때 직접 run() 메소드를 호출하지 않고 start()를 호출하는 이유가 있습니다.
		프로세스나 스레드가 실행된다는 의미는 CPU를 사용해 작업를 수행하는 것을 뜻합니다. 
		그런데 한번에 한가지 작업만 처리하는 것이 아니고 동시에 2가지 이상의 작업을 처리하는 멀티 프로세싱을 위해서는 CPU 스케줄링이 필요 합니다.
		운영체제는 보다 효율적으로 사용하기 위해 작업의 우선순위를 정해 처리합니다.
		결국 CPU의 사용 권한을 정하는 것은 프로그램이 아니라 운영체제의 몫입니다.
		start() 메소드는 스레드를 실행 가능한 상태 즉 스레드가 CPU를 사용할 수 있도록 준비 상태를 만드는 역할을 합니다.
		그리고 CPU 스케줄러에 의해 run() 메소드를 호출해 실제 CPU를 사용하는 상태로 바뀝니다.
		
					
			
			
			